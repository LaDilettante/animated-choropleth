install.packages("maptools")
library(rworldmap)
install.packages("rworldmap")
install.packages("rmapproj")
library(maps)
help(maps0)
help(maps)
vignette("sp")
install.packages("sp")
vignettes("ggmap")
vignette("ggmap")
vignette("sp")
library(ggmap)
library(mapproj)
map <- get_map(location = 'Europe', zoom = 4)
library(rworldmap)
newmap <- getMap(resolution = "low")
plot(newmap)
plot(newmap,
xlim = c(-20, 59),
ylim = c(35, 71),
asp = 1
)
newmap
fix(newmap)
rm(list=ls())
toInstall <- c("ggplot2", "maptools", "animation", "rgdal")
lapply(toInstall, library, character.only=TRUE)
# Load and clean WGI data
load('./data/wgi_cleaned.RData')
# Load world map shape file
world.map <- readOGR(dsn="./data", layer="TM_WORLD_BORDERS_SIMPL-0.3")
world.ggmap <- fortify(world.map, region = "NAME")
# Fix mismatched names
wgi$country[wgi$country=="Brunei"] <- "Brunei Darussalam"
wgi$country[wgi$country=="Laos"] <- "Lao People's Democratic Republic"
wgi$country[wgi$country=="North Korea"] <- "Korea, Democratic People's Republic of"
wgi$country[wgi$country=="South Korea"] <- "Korea, Republic of"
wgi$country[wgi$country=="Hong Kong Sar, China"] <- "Hong Kong"
wgi$country[wgi$country=="Iran"] <- "Iran (Islamic Republic of)"
wgi$country[wgi$country=="Libya"] <- "Libyan Arab Jamahiriya"
wgi$country[wgi$country=="Macedonia, Fyr"] <- "The former Yugoslav Republic of Macedonia"
wgi$country[wgi$country=="Russian Federation"] <- "Russia"
wgi$country[wgi$country=="St. Vincent and The Grenadines"] <- "Saint Vincent and the Grenadines"
wgi$country[wgi$country=="St. Lucia"] <- "Saint Lucia"
wgi$country[wgi$country=="Syria"] <- "Syrian Arab Republic"
wgi$country[wgi$country=="Netherlands Antilles (former)"] <- "Netherlands Antilles"
wgi$country[wgi$country=="Timor-leste"] <- "Timor-Leste"
wgi$country[wgi$country=="Taiwan, China"] <- "Taiwan"
wgi$country[wgi$country=="Micronesia, Fed. Sts."] <- "Micronesia, Federated States of"
wgi$country[wgi$country=="Congo, Dem. Rep."] <- "Democratic Republic of the Congo"
wgi$country[wgi$country=="Venezuela, Rb"] <- "Venezuela"
wgi$country[wgi$country=="Virgin Islands (u.s.)"] <- "United States Virgin Islands"
wgi$country[wgi$country=="Vietnam"] <- "Viet Nam"
wgi$country[wgi$country=="Guinea-bissau"] <- "Guinea-Bissau"
wgi$country[wgi$country=="Congo Republic"] <- "Congo"
wgi$country[wgi$country=="CÃ´te D'ivoire"] <- "Cote d'Ivoire"
wgi$country[wgi$country=="Myanmar"] <- "Burma"
wgi$country[wgi$country=="SÃ£o TomÃ© and Principe"] <- "Sao Tome and Principe"
wgi$country[wgi$country=="Tanzania"] <- "United Republic of Tanzania"
wgi$country[wgi$country=="West Bank and Gaza"] <- "Palestine"
wgi$country[wgi$country=="Moldova"] <- "Republic of Moldova"
help(saveSWF)
saveSWF({
for (i in c(1996, 1998, 2000, 2002:2011)) {
temp <- subset(na.omit(wgi[, c('year', 'country', 'cc_est')]), year==i)
choro <- merge(world.ggmap, temp, by.x="id", by.y="country")
choro <- choro[order(choro$order), ]
p <- ggplot(data=choro, aes(long, lat, fill=cc_est, group=group))
print(
p + geom_polygon() + ylim(c(-60,85)) +
scale_fill_gradient2("Control of\n corruption\n score", limits=c(-2.5,2.5)) +
labs(title=substitute(paste("Severity of corruption in the world, year ", i), list(i=i)))
)
}
}, ani.basename="world_corruption", interval=1,
ani.width=900, ani.height=450,
outdir=getwd())
# Load and clean WGI data
load('./data/wgi_cleaned.RData')
# Load world map shape file
world.map <- readOGR(dsn="./data", layer="TM_WORLD_BORDERS_SIMPL-0.3")
world.ggmap <- fortify(world.map, region = "NAME")
# Fix mismatched names
wgi$country[wgi$country=="Brunei"] <- "Brunei Darussalam"
wgi$country[wgi$country=="Laos"] <- "Lao People's Democratic Republic"
wgi$country[wgi$country=="North Korea"] <- "Korea, Democratic People's Republic of"
wgi$country[wgi$country=="South Korea"] <- "Korea, Republic of"
wgi$country[wgi$country=="Hong Kong Sar, China"] <- "Hong Kong"
wgi$country[wgi$country=="Iran"] <- "Iran (Islamic Republic of)"
wgi$country[wgi$country=="Libya"] <- "Libyan Arab Jamahiriya"
wgi$country[wgi$country=="Macedonia, Fyr"] <- "The former Yugoslav Republic of Macedonia"
wgi$country[wgi$country=="Russian Federation"] <- "Russia"
wgi$country[wgi$country=="St. Vincent and The Grenadines"] <- "Saint Vincent and the Grenadines"
wgi$country[wgi$country=="St. Lucia"] <- "Saint Lucia"
wgi$country[wgi$country=="Syria"] <- "Syrian Arab Republic"
wgi$country[wgi$country=="Netherlands Antilles (former)"] <- "Netherlands Antilles"
wgi$country[wgi$country=="Timor-leste"] <- "Timor-Leste"
wgi$country[wgi$country=="Taiwan, China"] <- "Taiwan"
wgi$country[wgi$country=="Micronesia, Fed. Sts."] <- "Micronesia, Federated States of"
wgi$country[wgi$country=="Congo, Dem. Rep."] <- "Democratic Republic of the Congo"
wgi$country[wgi$country=="Venezuela, Rb"] <- "Venezuela"
wgi$country[wgi$country=="Virgin Islands (u.s.)"] <- "United States Virgin Islands"
wgi$country[wgi$country=="Vietnam"] <- "Viet Nam"
wgi$country[wgi$country=="Guinea-bissau"] <- "Guinea-Bissau"
wgi$country[wgi$country=="Congo Republic"] <- "Congo"
wgi$country[wgi$country=="CÃ´te D'ivoire"] <- "Cote d'Ivoire"
wgi$country[wgi$country=="Myanmar"] <- "Burma"
wgi$country[wgi$country=="SÃ£o TomÃ© and Principe"] <- "Sao Tome and Principe"
wgi$country[wgi$country=="Tanzania"] <- "United Republic of Tanzania"
wgi$country[wgi$country=="West Bank and Gaza"] <- "Palestine"
wgi$country[wgi$country=="Moldova"] <- "Republic of Moldova"
getwd()
setwd("D:/Github/animated-choropleth")
# Load and clean WGI data
load('./data/wgi_cleaned.RData')
# Load world map shape file
world.map <- readOGR(dsn="./data", layer="TM_WORLD_BORDERS_SIMPL-0.3")
world.ggmap <- fortify(world.map, region = "NAME")
# Fix mismatched names
wgi$country[wgi$country=="Brunei"] <- "Brunei Darussalam"
wgi$country[wgi$country=="Laos"] <- "Lao People's Democratic Republic"
wgi$country[wgi$country=="North Korea"] <- "Korea, Democratic People's Republic of"
wgi$country[wgi$country=="South Korea"] <- "Korea, Republic of"
wgi$country[wgi$country=="Hong Kong Sar, China"] <- "Hong Kong"
wgi$country[wgi$country=="Iran"] <- "Iran (Islamic Republic of)"
wgi$country[wgi$country=="Libya"] <- "Libyan Arab Jamahiriya"
wgi$country[wgi$country=="Macedonia, Fyr"] <- "The former Yugoslav Republic of Macedonia"
wgi$country[wgi$country=="Russian Federation"] <- "Russia"
wgi$country[wgi$country=="St. Vincent and The Grenadines"] <- "Saint Vincent and the Grenadines"
wgi$country[wgi$country=="St. Lucia"] <- "Saint Lucia"
wgi$country[wgi$country=="Syria"] <- "Syrian Arab Republic"
wgi$country[wgi$country=="Netherlands Antilles (former)"] <- "Netherlands Antilles"
wgi$country[wgi$country=="Timor-leste"] <- "Timor-Leste"
wgi$country[wgi$country=="Taiwan, China"] <- "Taiwan"
wgi$country[wgi$country=="Micronesia, Fed. Sts."] <- "Micronesia, Federated States of"
wgi$country[wgi$country=="Congo, Dem. Rep."] <- "Democratic Republic of the Congo"
wgi$country[wgi$country=="Venezuela, Rb"] <- "Venezuela"
wgi$country[wgi$country=="Virgin Islands (u.s.)"] <- "United States Virgin Islands"
wgi$country[wgi$country=="Vietnam"] <- "Viet Nam"
wgi$country[wgi$country=="Guinea-bissau"] <- "Guinea-Bissau"
wgi$country[wgi$country=="Congo Republic"] <- "Congo"
wgi$country[wgi$country=="CÃ´te D'ivoire"] <- "Cote d'Ivoire"
wgi$country[wgi$country=="Myanmar"] <- "Burma"
wgi$country[wgi$country=="SÃ£o TomÃ© and Principe"] <- "Sao Tome and Principe"
wgi$country[wgi$country=="Tanzania"] <- "United Republic of Tanzania"
wgi$country[wgi$country=="West Bank and Gaza"] <- "Palestine"
wgi$country[wgi$country=="Moldova"] <- "Republic of Moldova"
saveSWF({
for (i in c(1996, 1998, 2000, 2002:2011)) {
temp <- subset(na.omit(wgi[, c('year', 'country', 'cc_est')]), year==i)
choro <- merge(world.ggmap, temp, by.x="id", by.y="country")
choro <- choro[order(choro$order), ]
p <- ggplot(data=choro, aes(long, lat, fill=cc_est, group=group))
print(
p + geom_polygon() + ylim(c(-60,85)) +
scale_fill_gradient2("Control of\n corruption\n score", limits=c(-2.5,2.5)) +
labs(title=substitute(paste("Severity of corruption in the world, year ", i), list(i=i)))
)
}
}, ani.basename="world_corruption", interval=1,
ani.width=900, ani.height=450,
outdir=getwd())
saveSWF({
for (i in c(1996, 1998, 2000, 2002:2011)) {
temp <- subset(na.omit(wgi[, c('year', 'country', 'cc_est')]), year==i)
choro <- merge(world.ggmap, temp, by.x="id", by.y="country")
choro <- choro[order(choro$order), ]
p <- ggplot(data=choro, aes(long, lat, fill=cc_est, group=group))
print(
p + geom_polygon() + ylim(c(-60,85)) +
scale_fill_gradient2("Control of\n corruption\n score", limits=c(-2.5,2.5)) +
labs(title=substitute(paste("Severity of corruption in the world, year ", i), list(i=i)))
)
}
}, ani.basename="world_corruption", interval=1,
ani.width=900, ani.height=450,
swftools="C:/Program Files (x86)/SWFTools"
outdir=getwd())
saveSWF({
for (i in c(1996, 1998, 2000, 2002:2011)) {
temp <- subset(na.omit(wgi[, c('year', 'country', 'cc_est')]), year==i)
choro <- merge(world.ggmap, temp, by.x="id", by.y="country")
choro <- choro[order(choro$order), ]
p <- ggplot(data=choro, aes(long, lat, fill=cc_est, group=group))
print(
p + geom_polygon() + ylim(c(-60,85)) +
scale_fill_gradient2("Control of\n corruption\n score", limits=c(-2.5,2.5)) +
labs(title=substitute(paste("Severity of corruption in the world, year ", i), list(i=i)))
)
}
}, ani.basename="world_corruption", interval=1,
ani.width=900, ani.height=450,
swftools="C:/Program Files (x86)/SWFTools",
outdir=getwd())
saveSWF({
for (i in c(1996, 1998, 2000, 2002:2011)) {
temp <- subset(na.omit(wgi[, c('year', 'country', 'cc_est')]), year==i)
choro <- merge(world.ggmap, temp, by.x="id", by.y="country")
choro <- choro[order(choro$order), ]
p <- ggplot(data=choro, aes(long, lat, fill=cc_est, group=group))
print(
p + geom_polygon() + ylim(c(-60,85)) +
scale_fill_gradient2("Control of\n corruption\n score", limits=c(-2.5,2.5)) +
labs(title=substitute(paste("Severity of corruption in the world, year ", i), list(i=i)))
)
}
}, swf.name="world_corruption", interval=1,
ani.width=1800, ani.height=900,
swftools="C:/Program Files (x86)/SWFTools",
outdir=getwd())
saveSWF({
for (i in c(1996, 1998, 2000, 2002:2011)) {
temp <- subset(na.omit(wgi[, c('year', 'country', 'cc_est')]), year==i)
choro <- merge(world.ggmap, temp, by.x="id", by.y="country")
choro <- choro[order(choro$order), ]
p <- ggplot(data=choro, aes(long, lat, fill=cc_est, group=group))
print(
p + geom_polygon() + ylim(c(-60,85)) +
scale_fill_gradient2("Control of\n corruption\n score", limits=c(-2.5,2.5)) +
labs(title=substitute(paste("Severity of corruption in the world, year ", i), list(i=i)))
)
}
}, swf.name="world_corruption.swf", interval=1,
ani.width=1800, ani.height=900,
swftools="C:/Program Files (x86)/SWFTools",
outdir=getwd())
saveSWF({
for (i in c(1996, 1998, 2000, 2002:2011)) {
temp <- subset(na.omit(wgi[, c('year', 'country', 'cc_est')]), year==i)
choro <- merge(world.ggmap, temp, by.x="id", by.y="country")
choro <- choro[order(choro$order), ]
p <- ggplot(data=choro, aes(long, lat, fill=cc_est, group=group))
print(
p + geom_polygon() + ylim(c(-60,85)) +
scale_fill_gradient2("Control of\n corruption\n score", limits=c(-2.5,2.5)) +
labs(title=substitute(paste("Severity of corruption in the world, year ", i), list(i=i)))
)
}
}, swf.name="world_corruption.swf", interval=1,
ani.width=1200, ani.height=600,
swftools="C:/Program Files (x86)/SWFTools",
outdir=getwd())
getwd()
load('./data/wgi_cleaned.RData')
# Fix mismatched names
wgi$country[wgi$country=="Brunei"] <- "Brunei Darussalam"
wgi$country[wgi$country=="Laos"] <- "Lao People's Democratic Republic"
wgi$country[wgi$country=="North Korea"] <- "Korea, Democratic People's Republic of"
wgi$country[wgi$country=="South Korea"] <- "Korea, Republic of"
wgi$country[wgi$country=="Hong Kong Sar, China"] <- "Hong Kong"
wgi$country[wgi$country=="Iran"] <- "Iran (Islamic Republic of)"
wgi$country[wgi$country=="Libya"] <- "Libyan Arab Jamahiriya"
wgi$country[wgi$country=="Macedonia, Fyr"] <- "The former Yugoslav Republic of Macedonia"
wgi$country[wgi$country=="Russian Federation"] <- "Russia"
wgi$country[wgi$country=="St. Vincent and The Grenadines"] <- "Saint Vincent and the Grenadines"
wgi$country[wgi$country=="St. Lucia"] <- "Saint Lucia"
wgi$country[wgi$country=="Syria"] <- "Syrian Arab Republic"
wgi$country[wgi$country=="Netherlands Antilles (former)"] <- "Netherlands Antilles"
wgi$country[wgi$country=="Timor-leste"] <- "Timor-Leste"
wgi$country[wgi$country=="Taiwan, China"] <- "Taiwan"
wgi$country[wgi$country=="Micronesia, Fed. Sts."] <- "Micronesia, Federated States of"
wgi$country[wgi$country=="Congo, Dem. Rep."] <- "Democratic Republic of the Congo"
wgi$country[wgi$country=="Venezuela, Rb"] <- "Venezuela"
wgi$country[wgi$country=="Virgin Islands (u.s.)"] <- "United States Virgin Islands"
wgi$country[wgi$country=="Vietnam"] <- "Viet Nam"
wgi$country[wgi$country=="Guinea-bissau"] <- "Guinea-Bissau"
wgi$country[wgi$country=="Congo Republic"] <- "Congo"
wgi$country[wgi$country=="CÃ´te D'ivoire"] <- "Cote d'Ivoire"
wgi$country[wgi$country=="Myanmar"] <- "Burma"
wgi$country[wgi$country=="SÃ£o TomÃ© and Principe"] <- "Sao Tome and Principe"
wgi$country[wgi$country=="Tanzania"] <- "United Republic of Tanzania"
wgi$country[wgi$country=="West Bank and Gaza"] <- "Palestine"
wgi$country[wgi$country=="Moldova"] <- "Republic of Moldova"
save("./wgi_final.RData")
load('./data/wgi_cleaned.RData')
# Fix mismatched names
wgi$country[wgi$country=="Brunei"] <- "Brunei Darussalam"
wgi$country[wgi$country=="Laos"] <- "Lao People's Democratic Republic"
wgi$country[wgi$country=="North Korea"] <- "Korea, Democratic People's Republic of"
wgi$country[wgi$country=="South Korea"] <- "Korea, Republic of"
wgi$country[wgi$country=="Hong Kong Sar, China"] <- "Hong Kong"
wgi$country[wgi$country=="Iran"] <- "Iran (Islamic Republic of)"
wgi$country[wgi$country=="Libya"] <- "Libyan Arab Jamahiriya"
wgi$country[wgi$country=="Macedonia, Fyr"] <- "The former Yugoslav Republic of Macedonia"
wgi$country[wgi$country=="Russian Federation"] <- "Russia"
wgi$country[wgi$country=="St. Vincent and The Grenadines"] <- "Saint Vincent and the Grenadines"
wgi$country[wgi$country=="St. Lucia"] <- "Saint Lucia"
wgi$country[wgi$country=="Syria"] <- "Syrian Arab Republic"
wgi$country[wgi$country=="Netherlands Antilles (former)"] <- "Netherlands Antilles"
wgi$country[wgi$country=="Timor-leste"] <- "Timor-Leste"
wgi$country[wgi$country=="Taiwan, China"] <- "Taiwan"
wgi$country[wgi$country=="Micronesia, Fed. Sts."] <- "Micronesia, Federated States of"
wgi$country[wgi$country=="Congo, Dem. Rep."] <- "Democratic Republic of the Congo"
wgi$country[wgi$country=="Venezuela, Rb"] <- "Venezuela"
wgi$country[wgi$country=="Virgin Islands (u.s.)"] <- "United States Virgin Islands"
wgi$country[wgi$country=="Vietnam"] <- "Viet Nam"
wgi$country[wgi$country=="Guinea-bissau"] <- "Guinea-Bissau"
wgi$country[wgi$country=="Congo Republic"] <- "Congo"
wgi$country[wgi$country=="CÃ´te D'ivoire"] <- "Cote d'Ivoire"
wgi$country[wgi$country=="Myanmar"] <- "Burma"
wgi$country[wgi$country=="SÃ£o TomÃ© and Principe"] <- "Sao Tome and Principe"
wgi$country[wgi$country=="Tanzania"] <- "United Republic of Tanzania"
wgi$country[wgi$country=="West Bank and Gaza"] <- "Palestine"
wgi$country[wgi$country=="Moldova"] <- "Republic of Moldova"
save(wgi, "./wgi_final.RData")
load('./data/wgi_cleaned.RData')
# Fix mismatched names
wgi$country[wgi$country=="Brunei"] <- "Brunei Darussalam"
wgi$country[wgi$country=="Laos"] <- "Lao People's Democratic Republic"
wgi$country[wgi$country=="North Korea"] <- "Korea, Democratic People's Republic of"
wgi$country[wgi$country=="South Korea"] <- "Korea, Republic of"
wgi$country[wgi$country=="Hong Kong Sar, China"] <- "Hong Kong"
wgi$country[wgi$country=="Iran"] <- "Iran (Islamic Republic of)"
wgi$country[wgi$country=="Libya"] <- "Libyan Arab Jamahiriya"
wgi$country[wgi$country=="Macedonia, Fyr"] <- "The former Yugoslav Republic of Macedonia"
wgi$country[wgi$country=="Russian Federation"] <- "Russia"
wgi$country[wgi$country=="St. Vincent and The Grenadines"] <- "Saint Vincent and the Grenadines"
wgi$country[wgi$country=="St. Lucia"] <- "Saint Lucia"
wgi$country[wgi$country=="Syria"] <- "Syrian Arab Republic"
wgi$country[wgi$country=="Netherlands Antilles (former)"] <- "Netherlands Antilles"
wgi$country[wgi$country=="Timor-leste"] <- "Timor-Leste"
wgi$country[wgi$country=="Taiwan, China"] <- "Taiwan"
wgi$country[wgi$country=="Micronesia, Fed. Sts."] <- "Micronesia, Federated States of"
wgi$country[wgi$country=="Congo, Dem. Rep."] <- "Democratic Republic of the Congo"
wgi$country[wgi$country=="Venezuela, Rb"] <- "Venezuela"
wgi$country[wgi$country=="Virgin Islands (u.s.)"] <- "United States Virgin Islands"
wgi$country[wgi$country=="Vietnam"] <- "Viet Nam"
wgi$country[wgi$country=="Guinea-bissau"] <- "Guinea-Bissau"
wgi$country[wgi$country=="Congo Republic"] <- "Congo"
wgi$country[wgi$country=="CÃ´te D'ivoire"] <- "Cote d'Ivoire"
wgi$country[wgi$country=="Myanmar"] <- "Burma"
wgi$country[wgi$country=="SÃ£o TomÃ© and Principe"] <- "Sao Tome and Principe"
wgi$country[wgi$country=="Tanzania"] <- "United Republic of Tanzania"
wgi$country[wgi$country=="West Bank and Gaza"] <- "Palestine"
wgi$country[wgi$country=="Moldova"] <- "Republic of Moldova"
save(wgi, file="./wgi_final.RData")
#Simulate data
n=1000
x1=rnorm(n,0,0.05)
x2=rnorm(n,0,0.1)
x3=rnorm(n,0,0.02)
e=rnorm(n,0,1)
y=x1+2*x2-0.5*x3+e
#Run regression
reg=lm(y~x1+x2+x3)
#Regression output
summary(reg)$coef
#Create dataset with confidence intervals and an index
CI=data.frame(summary(reg)$coef[,1]-2*summary(reg)$coef[,2],summary(reg)$coe
f[,1],summary(reg)$coef[,1]+2*summary(reg)$coef[,2],1:4)
names(CI)=c("lower","estimate","upper","index")
#inspect
CI
#now plot
#first a dotchart with coefficients "CI$estimate"
dotchart(CI$estimate,labels=row.names(summary(reg)$coef),xlim=c(min(CI[,1:3]
),max(CI[,1:3])),ylim=c(min(CI$index-1),max(CI$index+1)),pch=16,lcolor=NA)
#use lables from the regression output for the dotchart
#xlim assures there is enough space for the conf intervals
#ylime assures the plot looks nicely
#pch=16 puts a filled dot
#lcolor=NA removes the dotted lines on the chart
#now plot the confidence intervals
for(i in 1:max(CI$index)){
lines(c(CI$lower[i],CI$upper[i]),c(i,i))
}
#for each index (i.e., estimated coefficient)
#plot x-coordinates CI$upper and CI$lower
#at y-coordinate = index
rm(list=ls())
#Simulate data
n=1000
x1=rnorm(n,0,0.05)
x2=rnorm(n,0,0.1)
x3=rnorm(n,0,0.02)
e=rnorm(n,0,1)
y=x1+2*x2-0.5*x3+e
#Run regression
reg=lm(y~x1+x2+x3)
#Regression output
summary(reg)$coef
#Create dataset with confidence intervals and an index
CI=data.frame(summary(reg)$coef[,1]-2*summary(reg)$coef[,2],summary(reg)$coe
f[,1],summary(reg)$coef[,1]+2*summary(reg)$coef[,2],1:4)
names(CI)=c("lower","estimate","upper","index")
#inspect
CI
#now plot
#first a dotchart with coefficients "CI$estimate"
dotchart(CI$estimate,labels=row.names(summary(reg)$coef),xlim=c(min(CI[,1:3]
),max(CI[,1:3])),ylim=c(min(CI$index-1),max(CI$index+1)),pch=16,lcolor=NA)
#use lables from the regression output for the dotchart
#xlim assures there is enough space for the conf intervals
#ylime assures the plot looks nicely
#pch=16 puts a filled dot
#lcolor=NA removes the dotted lines on the chart
#now plot the confidence intervals
for(i in 1:max(CI$index)){
lines(c(CI$lower[i],CI$upper[i]),c(i,i))
}
#for each index (i.e., estimated coefficient)
#plot x-coordinates CI$upper and CI$lower
#at y-coordinate = index
rm(list=ls())
#Simulate data
n=1000
x1=rnorm(n,0,0.05)
x2=rnorm(n,0,0.1)
x3=rnorm(n,0,0.02)
e=rnorm(n,0,1)
y=x1+2*x2-0.5*x3+e
#Run regression
reg=lm(y~x1+x2+x3)
#Regression output
summary(reg)$coef
#Create dataset with confidence intervals and an index
CI=data.frame(summary(reg)$coef[,1]-2*summary(reg)$coef[,2],summary(reg)$coe
f[,1],summary(reg)$coef[,1]+2*summary(reg)$coef[,2],1:4)
names(CI)=c("lower","estimate","upper","index")
#inspect
CI
rm(list=ls())
#Simulate data
n=1000
x1=rnorm(n,0,0.05)
x2=rnorm(n,0,0.1)
x3=rnorm(n,0,0.02)
e=rnorm(n,0,1)
y=x1+2*x2-0.5*x3+e
#Run regression
reg=lm(y~x1+x2+x3)
#Regression output
summary(reg)$coef
#Create dataset with confidence intervals and an index
CI=data.frame(summary(reg)$coef[,1]-2*summary(reg)$coef[,2],
summary(reg)$coef[,1],summary(reg)$coef[,1]+2*summary(reg)$coef[,2],1:4)
names(CI)=c("lower","estimate","upper","index")
#inspect
CI
#now plot
#first a dotchart with coefficients "CI$estimate"
dotchart(CI$estimate,labels=row.names(summary(reg)$coef),xlim=c(min(CI[,1:3]
),max(CI[,1:3])),ylim=c(min(CI$index-1),max(CI$index+1)),pch=16,lcolor=NA)
#use lables from the regression output for the dotchart
#xlim assures there is enough space for the conf intervals
#ylime assures the plot looks nicely
#pch=16 puts a filled dot
#lcolor=NA removes the dotted lines on the chart
#now plot the confidence intervals
for(i in 1:max(CI$index)){
lines(c(CI$lower[i],CI$upper[i]),c(i,i))
}
#for each index (i.e., estimated coefficient)
#plot x-coordinates CI$upper and CI$lower
#at y-coordinate = index
CI
for(i in 1:max(CI$index)){
lines(c(CI$lower[i],CI$upper[i]),c(i,i))
}
library(xtable)
corstarsl <- function(x){
require(Hmisc)
x <- as.matrix(x)
R <- rcorr(x)$r
p <- rcorr(x)$P
## define notions for significance levels; spacing is important.
mystars <- ifelse(p < .001, "***", ifelse(p < .01, "** ", ifelse(p < .05, "* ", " ")))
## trunctuate the matrix that holds the correlations to two decimal
R <- format(round(cbind(rep(-1.11, ncol(x)), R), 2))[,-1]
## build a new matrix that includes the correlations with their apropriate stars
Rnew <- matrix(paste(R, mystars, sep=""), ncol=ncol(x))
diag(Rnew) <- paste(diag(R), " ", sep="")
rownames(Rnew) <- colnames(x)
colnames(Rnew) <- paste(colnames(x), "", sep="")
## remove upper triangle
Rnew <- as.matrix(Rnew)
Rnew[upper.tri(Rnew, diag = TRUE)] <- ""
Rnew <- as.data.frame(Rnew)
## remove last column and return the matrix (which is now a data frame)
Rnew <- cbind(Rnew[1:length(Rnew)-1])
return(Rnew)
}
corstarsl(swiss[,1:4])
xtable(corstarsl(swiss[,1:4])) #Latex code
library(xtable)
install.packages("xtable")
library(xtable)
corstarsl <- function(x){
require(Hmisc)
x <- as.matrix(x)
R <- rcorr(x)$r
p <- rcorr(x)$P
## define notions for significance levels; spacing is important.
mystars <- ifelse(p < .001, "***", ifelse(p < .01, "** ", ifelse(p < .05, "* ", " ")))
## trunctuate the matrix that holds the correlations to two decimal
R <- format(round(cbind(rep(-1.11, ncol(x)), R), 2))[,-1]
## build a new matrix that includes the correlations with their apropriate stars
Rnew <- matrix(paste(R, mystars, sep=""), ncol=ncol(x))
diag(Rnew) <- paste(diag(R), " ", sep="")
rownames(Rnew) <- colnames(x)
colnames(Rnew) <- paste(colnames(x), "", sep="")
## remove upper triangle
Rnew <- as.matrix(Rnew)
Rnew[upper.tri(Rnew, diag = TRUE)] <- ""
Rnew <- as.data.frame(Rnew)
## remove last column and return the matrix (which is now a data frame)
Rnew <- cbind(Rnew[1:length(Rnew)-1])
return(Rnew)
}
corstarsl(swiss[,1:4])
xtable(corstarsl(swiss[,1:4])) #Latex code
